import random
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from groq import Groq
from telegram.error import Conflict

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "Your_TG_Token"
GROQ_API_KEY = "Your_Groq_Token"
groq_client = Groq(api_key=GROQ_API_KEY)

MOOD_RESPONSES = [
    "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ —Å–∞–º?",
    "–ù–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ –º–æ–≥–ª–æ –±—ã—Ç—å –∏ –ª—É—á—à–µ.",
    "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ì–æ—Ç–æ–≤ –∫ —á–µ–º—É —É–≥–æ–¥–Ω–æ",
    "–£—Å—Ç–∞–ª... –ö–æ—Ñ–µ –Ω–µ —Å–ø–∞—Å–∞–µ—Ç ‚òï",
    "–ü–æ–π–¥–µ—Ç",
    "–Ø –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, —É –º–µ–Ω—è –≤—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ",
]

chat_modes = {}

main_keyboard = ReplyKeyboardMarkup(
    [["–ü—Ä–∏–≤–µ—Ç", "–ö–∞–∫ –¥–µ–ª–∞?"], ["–î–∞–≤–∞–π —Å–≤–æ–±–æ–¥–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏–º", "–ü–æ–∫–∞"]],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...",
)
ai_keyboard = ReplyKeyboardMarkup(
    [["–ü–æ–∂–∞–ª—É–π, –∑–∞–∫–æ–Ω—á–∏–º"]], resize_keyboard=True
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    chat_modes[user_id] = False
    await update.message.reply_text(
        " –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard,
    )


async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    text = update.message.text

    if text == "–ü—Ä–∏–≤–µ—Ç":
        await update.message.reply_text("–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç! üëã", reply_markup=main_keyboard)

    elif text == "–ö–∞–∫ –¥–µ–ª–∞?":
        response = random.choice(MOOD_RESPONSES)
        await update.message.reply_text(response, reply_markup=main_keyboard)

    elif text == "–î–∞–≤–∞–π —Å–≤–æ–±–æ–¥–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏–º":
        chat_modes[user_id] = True
        await update.message.reply_text(
            "üí¨ –†–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ì–æ–≤–æ—Ä–∏—Ç–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ!",
            reply_markup=ai_keyboard,
        )

    elif text == "–ü–æ–∂–∞–ª—É–π, –∑–∞–∫–æ–Ω—á–∏–º":
        chat_modes[user_id] = False
        await update.message.reply_text(
            "üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.",
            reply_markup=main_keyboard,
        )

    elif text == "–ü–æ–∫–∞":
        await update.message.reply_text(
            "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove(),
        )
        if 'application' in globals():
            await application.stop()

    elif chat_modes.get(user_id, False):
        await generate_groq_response(update)

    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã :)",
            reply_markup=main_keyboard,
        )


async def generate_groq_response(update: Update) -> None:
    try:
        groq_client.models.list()

        messages = [
            {
                "role": "system",
                "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
            },
            {"role": "user", "content": update.message.text},
        ]

        chat_completion = groq_client.chat.completions.create(
            messages=messages,
            model="meta-llama/llama-4-scout-17b-16e-instruct",
            temperature=0.7,
            max_tokens=1024,
        )

        if chat_completion.choices:
            ai_text = chat_completion.choices[0].message.content
            await update.message.reply_text(ai_text, reply_markup=ai_keyboard)
        else:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")

    except Exception as e:
        logger.error(f"Groq API error: {str(e)}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º...",
            reply_markup=main_keyboard,
        )
        chat_modes[update.message.from_user.id] = False


async def shutdown(application: Application) -> None:
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    await application.stop()
    await application.shutdown()


def main() -> None:
    global application

    try:
        application = Application.builder().token(TOKEN).build()

        handlers = [
            CommandHandler("start", start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons),
        ]
        for handler in handlers:
            application.add_handler(handler)

        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES,
        )

    except Conflict as e:
        logger.error(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}\n–ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞!")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    main()